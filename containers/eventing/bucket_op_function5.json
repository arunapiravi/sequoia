{
	"appname": "bucket_op_complex_function2",
	"id": 0,
	"depcfg": {
		"buckets": [{
			"alias": "dst",
			"bucket_name": "bucket_op_complex_2"
		}],
		"metadata_bucket": "metadata",
		"source_bucket": "bucket_op"
	},
	"appcode": "function OnUpdate(doc, meta) {\n    try{\n        log('document : ', meta.id);\n        var query_result = [167, 200, 390, 444, 5344, 634, 7134,418, 9244 , 10234];\n        res1 = test_continue(query_result);\n        res2 = test_break(query_result);\n        res3 = test_labelled_continue(query_result);\n        res4 = test_labelled_break(query_result);\n        if (res1 && res2 && res3 && res4){\n            dst[meta.id] = doc;\n}\n    }\n    catch(e){\n        log(e);\n    }    \n}\nfunction OnDelete(meta) {\n    try{\n        var query_result = [167, 200, 390, 444, 5344, 634, 7134,418, 9244 , 10234];\n        res1 = test_try_catch_throw(query_result);\n        if (res1){\n            delete dst[meta.id];\n     }\n    }\n    catch(e){\n        log(e);\n    }\n}\n\nfunction test_continue(query_result){\n    var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9 , 10];\n    var count = 0;\n    for(var row of nums) {\n      for(var row of nums) {\n        count++;\n        if(count == 5 || count == 7){\n          continue;\n        }\n        ++count;\n      }\n    }\n    var count1 = 0;\n    for(var row of query_result) {\n      for(var row of query_result) {\n        count1++;\n        if(count1 == 5 || count1 == 7){\n          continue;\n        }\n        ++count1;\n      }\n    }\n    log(\"test_continue :: count : \",count);\n    log(\"test_continue :: count1 : \",count1);\n    if (count === count1){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction test_break(query_result){\n    var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9 , 10];\n    var count = 0;\n    for(var row of nums) {\n        for(var row of nums) {\n            count++;\n            if(count == 5 || count == 7){\n                break;\n            }\n            ++count;\n        }\n    }\n    var count1 = 0;\n    for(var row of query_result) {\n        for(var row of query_result) {\n            count1++;\n            if(count1 == 5 || count1 == 7){\n                break;\n            }\n            ++count1;\n        }\n    }\n    log(\"test_break :: count : \",count);\n    log(\"test_break :: count1 : \",count1);\n    if (count === count1){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction test_labelled_continue(query_result){\n    var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9 , 10];\n    var count = 0;\n    list: for(var row of nums) {\n      for(var row of nums) {\n        count++;\n        if(count == 5 || count == 7){\n          continue list;\n        }\n        ++count;\n      }\n    }\n    var count1 = 0;\n    list: for(var row of query_result) {\n      for(var row of query_result) {\n        count1++;\n        if(count1 == 5 || count1 == 7){\n          continue list;\n        }\n        ++count1;\n      }\n    }\n    log(\"test_labelled_continue :: count : \",count);\n    log(\"test_labelled_continue :: count1 : \",count1);\n    if (count === count1){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction test_labelled_break(query_result){\n    var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9 , 10];\n    var count = 0;\n    list: for(var row of nums) {\n        for(var row of nums) {\n            count++;\n            if(count == 5 || count == 7){\n                break list;\n            }\n            ++count;\n        }\n    }\n    var count1 = 0;\n    list: for(var row of query_result) {\n        for(var row of query_result) {\n            count1++;\n            if(count1 == 5 || count1 == 7){\n                break list;\n            }\n            ++count1;\n        }\n    }\n    log(\"test_labelled_break :: count : \",count);\n    log(\"test_labelled_break :: count1 : \",count1);\n    if (count === count1){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction test_try_catch_throw(query_result){\n    var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9 , 10];\n    var count = 0;\n    for(var row of nums) {\n        try{\n            for(var row of nums) {\n                ++count;\n                if(count == 5 || count == 7){\n                    throw 'Error';\n                }\n            }\n        } catch(e) {\n            ++count;\n\t\t}\n\t}\n    var count1 = 0;\n    for(var row of query_result) {\n        try{\n            for(var row of query_result) {\n                ++count1;\n                if(count1 == 5 || count1 == 7){\n                    throw 'Error';\n                }\n            }\n        } catch(e) {\n            ++count1;\n\t\t}\n\t}\n    log(\"test_try_catch_throw :: count : \",count);\n    log(\"test_try_catch_throw :: count1 : \",count1);\n    if (count === count1){\n        return true;\n    } else {\n        return false;\n    }\n}",
	"settings": {
		"app_log_max_files": 10,
		"app_log_max_size": 10485760,
		"auto_swapper": true,
		"breakpad_on": true,
		"checkpoint_interval": 10000,
		"cleanup_timers": false,
		"cpp_worker_thread_count": 2,
		"cron_timers_per_doc": 1000,
		"curl_timeout": 500,
		"data_chan_size": 10000,
		"dcp_gen_chan_size": 10000,
		"dcp_num_connections": 1,
		"dcp_stream_boundary": "everything",
		"deadline_timeout": 62,
		"deployment_status": false,
		"description": "",
		"enable_recursive_mutation": true,
		"enable_snapshot_smr": false,
		"execution_timeout": 60,
		"feedback_batch_size": 100,
		"feedback_read_buffer_size": 65536,
		"fuzz_offset": 0,
		"lcb_inst_capacity": 5,
		"log_level": "INFO",
		"lss_cleaner_max_threshold": 70,
		"lss_cleaner_threshold": 30,
		"lss_read_ahead_size": 1048576,
		"max_delta_chain_len": 200,
		"max_page_items": 400,
		"min_page_items": 50,
		"persist_interval": 5000,
		"processing_status": false,
		"rbacpass": "password",
		"rbacrole": "admin",
		"rbacuser": "default",
		"skip_timer_threshold": 86400,
		"sock_batch_size": 100,
		"tick_duration": 60000,
		"timer_processing_tick_interval": 500,
		"timer_worker_pool_size": 3,
		"use_memory_manager": true,
		"vb_ownership_giveup_routine_count": 3,
		"vb_ownership_takeover_routine_count": 3,
		"worker_count": 3,
		"worker_feedback_queue_cap": 10000,
		"worker_queue_cap": 100000,
		"xattr_doc_timer_entry_prune_threshold": 100
	}
}